//
// Generated file, do not edit! Created by nedtool 5.6 from ProtocolMessages.msg.
//

#ifndef __PROTOCOLMESSAGES_M_H
#define __PROTOCOLMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>ProtocolMessages.msg:16</tt> by nedtool.
 * <pre>
 * message ProtocolMessage
 * {
 *     int bitmap[11];
 * 
 *     int view;
 *     int sequenceNumber;
 *     string clientMessage;
 * 
 *     string clientMessageDigest;
 *     string signature;
 * }
 * </pre>
 */
class ProtocolMessage : public ::omnetpp::cMessage
{
  protected:
    int bitmap[11];
    int view;
    int sequenceNumber;
    ::omnetpp::opp_string clientMessage;
    ::omnetpp::opp_string clientMessageDigest;
    ::omnetpp::opp_string signature;

  private:
    void copy(const ProtocolMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ProtocolMessage&);

  public:
    ProtocolMessage(const char *name=nullptr, short kind=0);
    ProtocolMessage(const ProtocolMessage& other);
    virtual ~ProtocolMessage();
    ProtocolMessage& operator=(const ProtocolMessage& other);
    virtual ProtocolMessage *dup() const override {return new ProtocolMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getBitmapArraySize() const;
    virtual int getBitmap(unsigned int k) const;
    virtual void setBitmap(unsigned int k, int bitmap);
    virtual int getView() const;
    virtual void setView(int view);
    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
    virtual const char * getClientMessage() const;
    virtual void setClientMessage(const char * clientMessage);
    virtual const char * getClientMessageDigest() const;
    virtual void setClientMessageDigest(const char * clientMessageDigest);
    virtual const char * getSignature() const;
    virtual void setSignature(const char * signature);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProtocolMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProtocolMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ProtocolMessages.msg:28</tt> by nedtool.
 * <pre>
 * message PrePrepare extends ProtocolMessage
 * {
 *     int originator;
 *     int clientId;
 * 
 * }
 * </pre>
 */
class PrePrepare : public ::ProtocolMessage
{
  protected:
    int originator;
    int clientId;
    omnetpp::simtime_t timestamp;

  private:
    void copy(const PrePrepare& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PrePrepare&);

  public:
    PrePrepare(const char *name=nullptr, short kind=0);
    PrePrepare(const PrePrepare& other);
    virtual ~PrePrepare();
    PrePrepare& operator=(const PrePrepare& other);
    virtual PrePrepare *dup() const override {return new PrePrepare(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getOriginator() const;
    virtual void setOriginator(int originator);
    virtual int getClientId() const;
    virtual void setClientId(int clientId);

    const omnetpp::simtime_t getTimestamp() const {
        return timestamp;
    }

    void setTimestamp(const omnetpp::simtime_t &timestamp) {
        this->timestamp = timestamp;
    }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PrePrepare& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PrePrepare& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ProtocolMessages.msg:34</tt> by nedtool.
 * <pre>
 * message Prepare extends ProtocolMessage
 * {
 *     int senderOverlayKey;
 * }
 * </pre>
 */
class Prepare : public ::ProtocolMessage
{
  protected:
    int senderOverlayKey;

  private:
    void copy(const Prepare& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Prepare&);

  public:
    Prepare(const char *name=nullptr, short kind=0);
    Prepare(const Prepare& other);
    virtual ~Prepare();
    Prepare& operator=(const Prepare& other);
    virtual Prepare *dup() const override {return new Prepare(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSenderOverlayKey() const;
    virtual void setSenderOverlayKey(int senderOverlayKey);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Prepare& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Prepare& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ProtocolMessages.msg:38</tt> by nedtool.
 * <pre>
 * message Commit extends ProtocolMessage
 * {
 *     int senderOverlayKey;
 * }
 * 
 * // Representing prepare-certificates and committed-local-certificates with messages
 * </pre>
 */
class Commit : public ::ProtocolMessage
{
  protected:
    int senderOverlayKey;

  private:
    void copy(const Commit& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Commit&);

  public:
    Commit(const char *name=nullptr, short kind=0);
    Commit(const Commit& other);
    virtual ~Commit();
    Commit& operator=(const Commit& other);
    virtual Commit *dup() const override {return new Commit(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSenderOverlayKey() const;
    virtual void setSenderOverlayKey(int senderOverlayKey);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Commit& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Commit& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ProtocolMessages.msg:44</tt> by nedtool.
 * <pre>
 * message Certificate
 * {
 *     int view;
 *     int sequenceNumber;
 *     string clientMessage;
 *     int issuerOverlayKey;
 * }
 * </pre>
 */
class Certificate : public ::omnetpp::cMessage
{
  protected:
    int view;
    int sequenceNumber;
    ::omnetpp::opp_string clientMessage;
    int issuerOverlayKey;

  private:
    void copy(const Certificate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Certificate&);

  public:
    Certificate(const char *name=nullptr, short kind=0);
    Certificate(const Certificate& other);
    virtual ~Certificate();
    Certificate& operator=(const Certificate& other);
    virtual Certificate *dup() const override {return new Certificate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getView() const;
    virtual void setView(int view);
    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
    virtual const char * getClientMessage() const;
    virtual void setClientMessage(const char * clientMessage);
    virtual int getIssuerOverlayKey() const;
    virtual void setIssuerOverlayKey(int issuerOverlayKey);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Certificate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Certificate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ProtocolMessages.msg:51</tt> by nedtool.
 * <pre>
 * message PrepareCertificate extends Certificate
 * {
 * }
 * </pre>
 */
class PrepareCertificate : public ::Certificate
{
  protected:

  private:
    void copy(const PrepareCertificate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PrepareCertificate&);

  public:
    PrepareCertificate(const char *name=nullptr, short kind=0);
    PrepareCertificate(const PrepareCertificate& other);
    virtual ~PrepareCertificate();
    PrepareCertificate& operator=(const PrepareCertificate& other);
    virtual PrepareCertificate *dup() const override {return new PrepareCertificate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PrepareCertificate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PrepareCertificate& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ProtocolMessages.msg:54</tt> by nedtool.
 * <pre>
 * message CommitLocalCertificate extends Certificate
 * {
 * }
 * </pre>
 */
class CommitLocalCertificate : public ::Certificate
{
  protected:

  private:
    void copy(const CommitLocalCertificate& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CommitLocalCertificate&);

  public:
    CommitLocalCertificate(const char *name=nullptr, short kind=0);
    CommitLocalCertificate(const CommitLocalCertificate& other);
    virtual ~CommitLocalCertificate();
    CommitLocalCertificate& operator=(const CommitLocalCertificate& other);
    virtual CommitLocalCertificate *dup() const override {return new CommitLocalCertificate(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CommitLocalCertificate& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CommitLocalCertificate& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PROTOCOLMESSAGES_M_H

