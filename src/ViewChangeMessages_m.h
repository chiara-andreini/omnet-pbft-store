//
// Generated file, do not edit! Created by nedtool 5.6 from ViewChangeMessages.msg.
//

#ifndef __VIEWCHANGEMESSAGES_M_H
#define __VIEWCHANGEMESSAGES_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>
#include <map>
#include <list>
#include "ProtocolMessages_m.h"
#include "Checkpoint.h"

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>ViewChangeMessages.msg:16</tt> by nedtool.
 * <pre>
 * message CheckpointMessage
 * {
 *     int seq_num;
 * }
 * </pre>
 */
class CheckpointMessage : public ::omnetpp::cMessage
{
  protected:
    int seq_num;
    Checkpoint* checkpoint;
    ::omnetpp::opp_string signature;

  private:
    void copy(const CheckpointMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CheckpointMessage&);

  public:
    CheckpointMessage(const char *name=nullptr, short kind=0);
    CheckpointMessage(const CheckpointMessage& other);
    virtual ~CheckpointMessage();
    CheckpointMessage& operator=(const CheckpointMessage& other);
    virtual CheckpointMessage *dup() const override {return new CheckpointMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSeq_num() const;
    virtual void setSeq_num(int seq_num);

    const ::omnetpp::opp_string getSignature() const {
        return signature;
    }

    void setSignature(const ::omnetpp::opp_string signature) {
        this->signature = signature;
    }

};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CheckpointMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CheckpointMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ViewChangeMessages.msg:20</tt> by nedtool.
 * <pre>
 * message ViewChange
 * {
 *     int new_view;
 *     int cp_seq_num;
 * }
 * </pre>
 */
class ViewChange : public ::omnetpp::cMessage
{
  protected:
    int senderOverlayKey;
    int bitmap[11];
    int new_view;
    int cp_seq_num;
    list<map<int, ProtocolMessage*>> p;
    list<CheckpointMessage*> c;
    ::omnetpp::opp_string signature;

  private:
    void copy(const ViewChange& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const ViewChange&);

  public:
    ViewChange(const char *name=nullptr, short kind=0);
    ViewChange(const ViewChange& other);
    virtual ~ViewChange();
    ViewChange& operator=(const ViewChange& other);
    virtual ViewChange *dup() const override {return new ViewChange(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSenderOverlayKey() const;
    virtual void setSenderOverlayKey(int senderOverlayKey);

    // field getter/setter methods
    virtual unsigned int getBitmapArraySize() const;
    virtual int getBitmap(unsigned int k) const;
    virtual void setBitmap(unsigned int k, int bitmap);
    virtual int getNew_view() const;
    virtual void setNew_view(int new_view);
    virtual int getCp_seq_num() const;
    virtual void setCp_seq_num(int cp_seq_num);

    const ::omnetpp::opp_string getSignature() const {
        return signature;
    }

    void setSignature(const ::omnetpp::opp_string signature) {
        this->signature = signature;
    }

    const list<CheckpointMessage*> getC() const {
        return c;
    }

    void setC(const list<CheckpointMessage*> c) {
        this->c = c;
    }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ViewChange& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ViewChange& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>ViewChangeMessages.msg:25</tt> by nedtool.
 * <pre>
 * message NewView
 * {
 *     int new_view;
 * }
 * </pre>
 */
class NewView : public ::omnetpp::cMessage
{
  protected:
    int new_view;
    list<ViewChange*> vcs;
    list<PrePrepare*> pps;
    ::omnetpp::opp_string signature;

  private:
    void copy(const NewView& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NewView&);

  public:
    NewView(const char *name=nullptr, short kind=0);
    NewView(const NewView& other);
    virtual ~NewView();
    NewView& operator=(const NewView& other);
    virtual NewView *dup() const override {return new NewView(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getNew_view() const;
    virtual void setNew_view(int new_view);

    const ::omnetpp::opp_string getSignature() const {
        return signature;
    }

    void setSignature(const ::omnetpp::opp_string signature) {
        this->signature = signature;
    }

    const list<PrePrepare*> getPps() const {
        return pps;
    }

    void setPps(const list<PrePrepare*> pps) {
        this->pps = pps;
    }

    const list<ViewChange*> getVcs() const {
        return vcs;
    }

    void setVcs(const list<ViewChange*> vcs) {
        this->vcs = vcs;
    }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const NewView& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, NewView& obj) {obj.parsimUnpack(b);}


#endif // ifndef __VIEWCHANGEMESSAGES_M_H

